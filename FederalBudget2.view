<<<<<<<=view-json=
{
  "id":"FederalBudget2",
  "name":"FederalBudget2",
  "category":"Chart",
  "default":{
    "jsonClass":"View",
    "elxType":"View",
    "vtype":"bundle",
    "state":"visible",
    "isContainer":false,
    "position":{
      "jsonClass":"Position",
      "elxType":"Position",
      "height":"420",
      "width":"670",
      "zIndex":"auto"
    },
    "data":{
      "jsonClass":"DataEmbedded",
      "datasource":{
        "jsonClass":"DataSource",
        "name":"initData",
        "stype":"Data",
        "desc":"default data",
        "schema":{
          "jsonClass":"Schema",
          "caseSensitive":false,
          "columns":[{
            "jsonClass":"SchemaColumn",
            "name":"Department",
            "dtype":"String",
            "attrs":[]
          },{
            "jsonClass":"SchemaColumn",
            "name":"Team",
            "dtype":"String",
            "attrs":[]
          },{
            "jsonClass":"SchemaColumn",
            "name":"Employee",
            "dtype":"String",
            "attrs":[]
          },{
            "jsonClass":"SchemaColumn",
            "name":"Employee Description",
            "dtype":"String",
            "attrs":[]
          },{
            "jsonClass":"SchemaColumn",
            "name":"Salary",
            "dtype":"Double",
            "attrs":[]
          },{
            "jsonClass":"SchemaColumn",
            "name":"Profit",
            "dtype":"Double",
            "attrs":[]
          },{
            "jsonClass":"SchemaColumn",
            "name":"Sales Target",
            "dtype":"Double",
            "attrs":[]
          }]
        },
        "data":{
          "jsonClass":"DataRecords",
          "records":[{
            "jsonClass":"Record",
            "fields":[{
              "jsonClass":"Field",
              "value":"Sales"
            },{
              "jsonClass":"Field",
              "value":"Team A"
            },{
              "jsonClass":"Field",
              "value":"Employee A"
            },{
              "jsonClass":"Field",
              "value":"Employee A Description"
            },{
              "jsonClass":"Field",
              "value":"2000"
            },{
              "jsonClass":"Field",
              "value":"13000"
            },{
              "jsonClass":"Field",
              "value":"9000"
            }]
          }]
        }
      },"hint":"directive-data-array",
      "directive":"ZnVuY3Rpb24gZGF0YSgpew0KdmFyIGNUb2dnbGVUeXBlPXZpZXcudHlwZWluZm8uZGF0YS5jVG9nZ2xlVHlwZUNvbDsNCnZhciBjRGVzY3JpcHRpb249dmlldy50eXBlaW5mby5kYXRhLmNEZXNjcmlwdGlvbkNvbDsNCiAgICB2YXIgdD12aWV3LnR5cGVpbmZvLmRhdGEub3BlcmFibGUudmFsdWVzOw0KICAJdmFyIGs9dmlldy50eXBlaW5mby5kYXRhLmtleXM7DQoNCiAgdmFyIGNvbHVtbnM9W107IHZhciBvcGVyYXRpb25zPVtdOyB2YXIga2V5cz1bXTsNCiBpZihjVG9nZ2xlVHlwZVswXS5uYW1lICE9bnVsbCAmJiB2aWV3LnR5cGVpbmZvLmNUb2dnbGVLZXkhPSdkZWZhdWx0JykNCiB7a2V5cy5wdXNoKGNUb2dnbGVUeXBlWzBdLm5hbWUpO30NCiAgaWYoY0Rlc2NyaXB0aW9uWzBdLm5hbWUgIT1udWxsICYmIHZpZXcudHlwZWluZm8uY0Rlc2NyaXB0aW9uS2V5IT0nZGVmYXVsdCcpDQoge2tleXMucHVzaChjRGVzY3JpcHRpb25bMF0ubmFtZSk7fQ0KICB0LmZvckVhY2goZnVuY3Rpb24oZCxpKSB7DQogIGNvbHVtbnMucHVzaChkLm5hbWUpOw0KICAgIG9wZXJhdGlvbnMucHVzaChkLm9wKTsNCiAgfSkNCiAgay5mb3JFYWNoKGZ1bmN0aW9uKGQsaSkgew0KICAgIGtleXMucHVzaChkLm5hbWUpO30pDQogICByZXR1cm4gcm93cy5ncm91cEJ5KGtleXMsY29sdW1ucywgb3BlcmF0aW9ucyk7DQp9DQpkYXRhKCk7"
    },
    "typeinfo":{
      "jsonClass":"Bundle",
      "type":"FederalBudget2",
      "data":{
	
		"cToggleTypeCol":[{"name":"Department"}],
		"cDescriptionCol":[{"name":"Employee Description"}],
		"keys":[
            {
              "name":"Team",
              "id":"|"
            },
			{
              "name":"Employee",
              "id":"|"
            }
          ],
		    "operable":{
            "values":[
              {
                "id":"Salary.1",
                "name":"Salary",
                "op":"sum"
              }
            ]
          }
		  },
		"formatClassKey":"",
		"cToggleKey":"cToggleEnabled",
		"cDescriptionKey":"cDescriptionEnabled",
		"formatClassCast":"",
		"formatPrefixCast":"",
		"nestArr":"Team,Employee",
        "width":"680",
        "height":"750",
		"marginB":"0",
		"marginT":"30",
		"marginL":"170",
		"marginR":"20",
      "frameWidth":"670",
      "frameHeight":"420",
      "navBarMinWidth":"180"
      }
		 },
  "includes":["/elx/lib/d3.v3.js","/elx/lib/federalBudget.js","/elx/lib/multiSelectCustom.js"],
  "edit-section":[{
    "id":"view",
    "name":"View"
  },{
    "id":"data",
    "name":"Data"
  },{
    "id":"FederalBudget2",
    "name":"FederalBudget2"
  }]
}
========
<<<<<<<=edit-json=
{
   "jsonClass":"ViewSectionGroup",
   "id":"FederalBudget2",
   "groups":[
      {
         "jsonClass":"Group",
         "label":"Chart",
         "rows":[
            {
               "jsonClass":"Row",
               "cols":[
                  {
                     "jsonClass":"Label",
                     "id":"typeinfo-height-label",
                     "type":"label",
                     "text":"Chart Height"
                  },
                  {
                     "jsonClass":"Field",
                     "id":"typeinfo-height",
                     "type":"field",
                     "value":"${typeinfo.height}",
                     "readonly":false
                  }
               ]
            },
            {
               "jsonClass":"Row",
               "cols":[
                  {
                     "jsonClass":"Label",
                     "id":"typeinfo-width-label",
                     "type":"label",
                     "text":"Chart Width"
                  },
                  {
                     "jsonClass":"Field",
                     "id":"typeinfo-width",
                     "type":"field",
                     "value":"${typeinfo.width}",
                     "readonly":false
                  }
               ]
            }, {
               "jsonClass":"Row",
               "cols":[
                  {
                     "jsonClass":"Label",
                     "id":"typeinfo-frameWidth-label",
                     "type":"label",
                     "text":"Frame Width"
                  },
                  {
                     "jsonClass":"Field",
                     "id":"typeinfo-frameWidth",
                     "type":"field",
                     "value":"${typeinfo.frameWidth}",
                     "readonly":false
                  }
               ]
            },{
               "jsonClass":"Row",
               "cols":[
                  {
                     "jsonClass":"Label",
                     "id":"typeinfo-frameHeight-label",
                     "type":"label",
                     "text":"Frame Height"
                  },
                  {
                     "jsonClass":"Field",
                     "id":"typeinfo-frameHeight",
                     "type":"field",
                     "value":"${typeinfo.frameHeight}",
                     "readonly":false
                  }
               ]
            }
         ]
      },      
      {
         "jsonClass":"Group",
         "label":"Data",
         "rows":[
            {
               "jsonClass":"Row",
               "cols":[
                  {
                     "jsonClass":"Label",
                     "id":"typeinfo-property-label",
                     "type":"label",
                     "text":"Keys"
                  },
                  {
                     "jsonClass":"Div",
                     "id":"typeinfo-property"
                  }
               ]
            },
            {
               "jsonClass":"Row",
               "cols":[
                  {
                     "jsonClass":"Label",
                     "id":"typeinfo-data-operable-values-label",
                     "type":"label",
                     "text":"Column"
                  },
                  {
                     "jsonClass":"Div",
                     "id":"typeinfo-data-operable-values"
                  }
               ]
            },
            {
               "jsonClass":"Row",
               "cols":[
                  {
                     "jsonClass":"Label",
                     "id":"typeinfo-nestArr-label",
                     "type":"label",
                     "text":"Nesting Keys"
                  },
                  {
                     "jsonClass":"Field",
                     "id":"typeinfo-nestArr",
                     "type":"field",
                     "value":"${typeinfo.nestArr}",
                     "readonly":false
                  }
               ]
            }
         ]
      },{
         "jsonClass":"Group",
         "label":"Nav Bar",
         "rows":[
            {
               "jsonClass":"Row",
               "cols":[
                  {
                     "jsonClass":"Label",
                     "id":"typeinfo-navBarMinWidth-label",
                     "type":"label",
                     "text":"Nav Bar MinWidth"
                  },
                  {
                     "jsonClass":"Field",
                     "id":"typeinfo-navBarMinWidth",
                     "type":"field",
                     "value":"${typeinfo.navBarMinWidth}",
                     "readonly":false
                  }
               ]
            }
         ]
      },
      {
         "jsonClass":"Group",
         "label":"Chart format",
         "rows":[
            {
               "jsonClass":"Row",
               "cols":[
                  {
                     "jsonClass":"Label",
                     "id":"typeinfo-formatClassKey-label",
                     "type":"label",
                     "text":"Format Class key"
                  },
                  {
                     "jsonClass":"Select",
                     "id":"typeinfo-formatClassKey",
                     "type":"select",
                     "value":"${typeinfo.formatClassKey}",
                     "options":[
                        {
                           "jsonClass":"Option",
                           "text":"default",
                           "value":"default"
                        },
                        {
                           "jsonClass":"Option",
                           "text":"Format class",
                           "value":"formatClassCast"
                        }
                     ]
                  }
               ]
            },
            {
               "jsonClass":"Row",
               "cols":[
                  {
                     "jsonClass":"Label",
                     "id":"typeinfo-formatClassCast-label",
                     "type":"label",
                     "text":"Format Class"
                  },
                  {
                     "jsonClass":"Field",
                     "id":"typeinfo-formatClassCast",
                     "type":"field",
                     "value":"${typeinfo.formatClassCast}",
                     "readonly":false
                  }
               ]
            },
            {
               "jsonClass":"Row",
               "cols":[
                  {
                     "jsonClass":"Label",
                     "id":"typeinfo-formatPrefixCast-label",
                     "type":"label",
                     "text":"Format Prefix"
                  },
                  {
                     "jsonClass":"Field",
                     "id":"typeinfo-formatPrefixCast",
                     "type":"field",
                     "value":"${typeinfo.formatPrefixCast}",
                     "readonly":false
                  }
               ]
            },
            {
               "jsonClass":"Row",
               "cols":[
                  {
                     "jsonClass":"Label",
                     "id":"typeinfo-cToggleKey-label",
                     "type":"label",
                     "text":"C Toggle Key"
                  },
                  {
                     "jsonClass":"Select",
                     "id":"typeinfo-cToggleKey",
                     "type":"select",
                     "value":"${typeinfo.cToggleKey}",
                     "options":[
                        {
                           "jsonClass":"Option",
                           "text":"default",
                           "value":"default"
                        },
                        {
                           "jsonClass":"Option",
                           "text":"enabled",
                           "value":"cToggleEnabled"
                        }
                     ]
                  }
               ]
            },
            {
               "jsonClass":"Row",
               "cols":[
                  {
                     "jsonClass":"Label",
                     "id":"typeinfo-cToggleType-label",
                     "type":"label",
                     "text":"C Toggle Type"
                  },
                  {
                     "jsonClass":"SchemaColumnSelect",
                     "id":"typeinfo-data-cToggleTypeCol",
                     "type":"select-schema-column",
                     "value":"${typeinfo.data.cToggleTypeCol[0].name}"
                  }
               ]
            },
            {
               "jsonClass":"Row",
               "cols":[
                  {
                     "jsonClass":"Label",
                     "id":"typeinfo-cDescriptionKey-label",
                     "type":"label",
                     "text":"C Description Key"
                  },
                  {
                     "jsonClass":"Select",
                     "id":"typeinfo-cDescriptionKey",
                     "type":"select",
                     "value":"${typeinfo.cDescriptionKey}",
                     "options":[
                        {
                           "jsonClass":"Option",
                           "text":"default",
                           "value":"default"
                        },
                        {
                           "jsonClass":"Option",
                           "text":"enabled",
                           "value":"cDescriptionEnabled"
                        }
                     ]
                  }
               ]
            },
            {
               "jsonClass":"Row",
               "cols":[
                  {
                     "jsonClass":"Label",
                     "id":"typeinfo-cDescription-label",
                     "type":"label",
                     "text":"C Description Type"
                  },
                  {
                     "jsonClass":"SchemaColumnSelect",
                     "id":"typeinfo-data-cDescriptionCol",
                     "type":"select-schema-column",
                     "value":"${typeinfo.data.cDescriptionCol[0].name}"
                  }
               ]
            }
         ]
      },
      {
         "jsonClass":"Group",
         "label":"Margin",
         "rows":[
            {
               "jsonClass":"Row",
               "cols":[
                  {
                     "jsonClass":"Label",
                     "id":"typeinfo-marginB-label",
                     "type":"label",
                     "text":"Bottom Margin"
                  },
                  {
                     "jsonClass":"Field",
                     "id":"typeinfo-marginB",
                     "type":"field",
                     "value":"${typeinfo.marginB}",
                     "readonly":false
                  }
               ]
            },
            {
               "jsonClass":"Row",
               "cols":[
                  {
                     "jsonClass":"Label",
                     "id":"typeinfo-marginT-label",
                     "type":"label",
                     "text":"Top Margin"
                  },
                  {
                     "jsonClass":"Field",
                     "id":"typeinfo-marginT",
                     "type":"field",
                     "value":"${typeinfo.marginT}",
                     "readonly":false
                  }
               ]
            },
            {
               "jsonClass":"Row",
               "cols":[
                  {
                     "jsonClass":"Label",
                     "id":"typeinfo-marginL-label",
                     "type":"label",
                     "text":"Left Margin"
                  },
                  {
                     "jsonClass":"Field",
                     "id":"typeinfo-marginL",
                     "type":"field",
                     "value":"${typeinfo.marginL}",
                     "readonly":false
                  }
               ]
            },
            {
               "jsonClass":"Row",
               "cols":[
                  {
                     "jsonClass":"Label",
                     "id":"typeinfo-marginR-label",
                     "type":"label",
                     "text":"Right Margin"
                  },
                  {
                     "jsonClass":"Field",
                     "id":"typeinfo-marginR",
                     "type":"field",
                     "value":"${typeinfo.marginR}",
                     "readonly":false
                  }
               ]
            }
         ]
      }
   ]
}
========
<<<<<<<=edit-js=
elx.bundle.type.FederalBudget2 = {

  	init : function(view) {
	  var dataKey = elx.MultiKeyColumnSection.getKeyData(view,view.typeinfo.data.keys);
           var tableKey=  new elx.MultiKeyColumnSection("typeinfo-property-keys","typeinfo-property", view, dataKey);
      $("#typeinfo-property-keys").data("table",tableKey);
            var dataOps =  elx.utils.getElxChartOperablesData(view, view.typeinfo.data.operable.values);
   		var tableOp = new elx.MultiChartValueColumnSection("typeinfo-data-operable-values-table",
                                                        "typeinfo-data-operable-values", view, dataOps);
		$("#typeinfo-data-operable-values-table").data("table",tableOp);
	  elx.host.utils.initSectionGroups(view,$("#FederalBudget2-div"));
	 $("#typeinfo-data-cToggleTypeCol").val(view.typeinfo.data.cToggleTypeCol[0].name);
        $("#typeinfo-data-cDescriptionCol").val(view.typeinfo.data.cDescriptionCol[0].name);
	},

	validate : function(view) {
		return true;
	},

	save : function(view) {
		var dataTableOp = $("#typeinfo-data-operable-values-table").data("table");
       var dataOp = dataTableOp.table.getData();
          view.typeinfo.data.operable.values = 
          elx.utils.buildElxChartOperablesData(view.typeinfo.data.operable.values,dataOp);
      
	   var dataTableKey = $("#typeinfo-property-keys").data("table");
        var dataKey = dataTableKey.table.getData();
        view.typeinfo.data.keys = elx.MultiKeyColumnSection.buildKeyData(dataKey);
 
		elx.host.utils.saveProperties(view.typeinfo);
      console.log("desKey",$("#typeinfo-cDescriptionKey").val());
      if($("#typeinfo-cDescriptionKey").val()=='default'|| $("#typeinfo-data-cDescriptionCol").val()==null) {
        console.log("cDescriptionKey should be default");
        view.typeinfo.data.cDescriptionCol[0]={};}
      else{
         var dDescription = $("#typeinfo-data-cDescriptionCol").val();
        console.log("dDescription",dDescription);
        console.log("view cDes",view.typeinfo.data.cDescriptionCol);
		view.typeinfo.data.cDescriptionCol[0]['name'] = dDescription;
      }
      if($("#typeinfo-cToggleKey").val()=='default'|| $("#typeinfo-data-cToggleTypeCol").val()==null) {view.typeinfo.data.cToggleTypeCol[0]={};}
      else{
       var dToggle = $("#typeinfo-data-cToggleTypeCol").val();
		view.typeinfo.data.cToggleTypeCol[0]['name'] = dToggle;
      }
    }
	
};
========
<<<<<<<=view-html=
<style type='text/css'>
  #body_${id}{margin:0;font-size:14px;font-family:"Helvetica Neue",Helvetica}
  .node circle{cursor:pointer;stroke-width:1.5px}.node text{font-size:11px}
    path.link{fill:none;stroke:#ccc;stroke-width:1.5px}
 td.sliderClass{width:120px;}
  .ui-multiselect{padding:2px 0 2px 4px;text-align:left}.ui-multiselect span.ui-icon{float:right}.ui-multiselect-single .ui-multiselect-checkboxes input{position:absolute!important;top:auto!important;left:-9999px}.ui-multiselect-single .ui-multiselect-checkboxes label{padding:5px!important}.ui-multiselect-header{margin-bottom:3px;padding:3px 0 3px 4px}.ui-multiselect-header ul{font-size:.9em}.ui-multiselect-header ul li{float:left;padding:0 10px 0 0}.ui-multiselect-header a{text-decoration:none}.ui-multiselect-header a:hover{text-decoration:underline}.ui-multiselect-header span.ui-icon{float:left}.ui-multiselect-header li.ui-multiselect-close{float:right;text-align:right;padding-right:0}.ui-multiselect-menu{display:none;padding:3px;position:absolute;z-index:10000;text-align:left}.ui-multiselect-checkboxes{position:relative;overflow-y:auto}.ui-multiselect-checkboxes label{cursor:default;display:block;border:1px solid transparent;padding:3px 1px}.ui-multiselect-checkboxes label input{position:relative;top:1px}.ui-multiselect-checkboxes li{clear:both;font-size:.9em;padding-right:3px}.ui-multiselect-checkboxes li.ui-multiselect-optgroup-label{text-align:center;font-weight:700;border-bottom:1px solid}.ui-multiselect-checkboxes li.ui-multiselect-optgroup-label a{display:block;padding:3px;margin:1px 0;text-decoration:none}* html .ui-multiselect-checkboxes label{border:none}
</style>
<div id ='mega${id}'>
<table id='dataGroup_${id}'></table>

<div id='body_${id}'></div>

</div>
<div class='elx-script'>


 var view=elx.host.getViewById("${id}");
 var viewId = view.id;
  var div = $("#mega${id}");
 console.log("view",JSON.stringify(view));

 var cfgoptions = view.typeinfo;
 var f = view.typeinfo.data;
 var margin = [cfgoptions.marginB, cfgoptions.marginL, cfgoptions.marginT, cfgoptions.marginR],
     width = cfgoptions.width - margin[1] - margin[3],
     height = cfgoptions.height - margin[0] - margin[2];
	  var frameWidth = view.typeinfo.frameWidth;
	var frameHeight = view.typeinfo.frameHeight;
	
 var formatClassKey = cfgoptions.formatClassKey,
     formatClassCast = cfgoptions.formatClassCast,
     formatPrefixCast = cfgoptions.formatPrefixCast;
	  var formatClass;
 if (formatClassKey == 'formatClassCast') {
    
     eval(formatClassCast);
 } else{
  formatClass = {
     '1': {
         'cToggleAccept': 'All', //salary
         'formatValueByCategory': function(arr) {
             return sum(arr);
         },
         'formatValueOutlook': function(val) {
             return ' ' + d3.round(prefixClass['1']('Size').scale(val), 2) + prefixClass['1']('Size').symbol;
         }
     },
     '2': {
         'cToggleAccept': 'All', //
         'formatValueByCategory': function(arr) {
             return sum(arr);
         },
         'formatOutlook': function(val) {
             return ' ' + d3.round(prefixClass['2']('Size').scale(val), 2) + prefixClass['2']('Size').symbol;
         }
     },
     '3': {
         'cToggleAccept': 'Sales', //
         'formatValueByCategory': function(arr) {
             return sum(arr);
         },
         'formatOutlook': function(val) {
             return ' ' + d3.round(prefixClass['3']('Size').scale(val), 2) + prefixClass['3']('Size').symbol;
         }
     }
 };
 }
 var initializedCMap = {};

 var safeRead;var cutTableName; var getArr;
 var cTypeClassOutput;
  var  extendArr, arrToHex1;
  var hexToModel1,processCFields,modelToHex,groupByFn,chartPreGen,initializeToolTip,settingFrame,configNavBar,initializeCFieldsObj;

  debugFn();
  var cFieldsObj={};
  initializeCFieldsObj(view);
  console.log("cFieldsObj",cFieldsObj);
   cManipulateView(cFieldsObj);
  
 console.log("viewAfterManipulated",JSON.stringify(view));
 // get Data
 if (view.data.jsonClass === "DataEmbedded") {
     rawdata = [
         ["Sales", "John 1", "A", "John", 2000, 30, 52],
         ["Sales", "John 1", "A", "John", 2000, 30, 52],
         ["Sales", "John 1", "A", "John", 2000, 30, 52],
         ["Sales", "Gary 1", "A", "Gary", 3000, 30, 52],
         ["Sales", "Gary 1", "A", "Gary", 2500, 90, 41],
         ["Sales", "Jim 1", "B", "Jim", 2000, 30, 40],
         ["Sales", "Jim 1", "B", "Jim", 1790, 30, 40],
         ["Sales", "Tooi 1", "B", "Tooi", 4000, 58, 79],
         ["Driver", "Fope 1", "J", "Fope", 1000, 90, 0],
         ["Driver", "Fope 1", "J", "Fope", 1000, 90, 0],
         ["Driver", "Fope 1", "J", "Fope", 1000, 90, 0],
         ["Driver", "Goot 1", "J", "Goot", 1000, 90, 0],
         ["Driver", "Goot 1", "J", "Goot", 1000, 90, 0],
         ["Driver", "Bill 1", "K", "Bill", 1000, 90, 0],
         ["Driver", "Bill 1", "K", "Bill", 1000, 90, 0],
         ["Driver", "Bill 1", "K", "Bill", 1000, 90, 0]
     ];

     var extendedArr = rawdata;
     var reduceCToggleArr = extendedArr;
 } else {
     rawdata = ${data};
     var extendedArr = extendArr(rawdata, f, view);
 }
 console.log("rawdata", JSON.stringify(rawdata));
 //need ** to write a function to deal with Description Column


 console.log("before debugFn");
  console.log("f",f);

  var data1 = arrToHex1(extendedArr, f, view,initializedCMap,cFieldsObj);
 var legendKey = 'lastGroupby_op';
 var formatLegendCast = "";
console.log("data Hex",data1[0]);
console.log("initializedCMap",initializedCMap);
 var data2=modelAddCMap(data1,initializedCMap);
 console.log("data AddCMap[0]",data2[0]);
 var data2 = hexToModel1(data2, legendKey, formatLegendCast, view);
 console.log("data2 model",JSON.stringify(data2));
 var nestArr = (cfgoptions.nestArr != null) ? (cfgoptions.nestArr).split(",") : autoDetectNestArr(f, view);
var rootObj={};
var Fselect={};
var ToolTipContainer={};
  var groupCount = 0;
  var dataGroupHex="#dataGroup_"+viewId;
  var maxBubbleSize=50;
  var linkSize=170;
 chartPreGen(data2,rootObj, Fselect);
  initializeFselect(f, view, nestArr, groupCount,Fselect,ToolTipContainer,cFieldsObj);
 
 console.log("rootObj",JSON.stringify(rootObj));
 console.log("viewId",viewId);
 console.log("Fselect",Fselect);
 console.log("ToolTipContainer",ToolTipContainer);
    //render Chart
    chart = federalChart()
	  .viewId(viewId)
	  .width(width)
	  .height(height)
	  .margin(margin)
	  .root(rootObj)
	  .groupCount(groupCount)
	  .dataGroupHex(dataGroupHex)
  	  .linkSize(linkSize)
  	  .maxBubbleSize(maxBubbleSize)
	  .navBarMinWidth(parseInt(cfgoptions.navBarMinWidth))
	  .ToolTipContainer(ToolTipContainer)
	  .Fselect(Fselect);
    d3.select("#body_"+viewId).datum([]).call(chart);
	
	settingFrame(frameHeight,frameWidth,view,div,elx);
 
	
 function debugFn() {

         extendArr = function(data, f, view) {	
             //used when you want to use the same columns in operables
             //obtain uniq columnNames
             var colNameMap = {};
             var uniqColName = [];
             var fieldsArr = getArr(f, 'name', view);
             //if(view.typeinfo.cToggleKey=='default') fieldsArr=_.rest(fieldsArr);
             var n = 0; //n is the index of unextended Arr
             for (var i = 0; i < _.size(fieldsArr); i++) {
                 var colAsProperty = fieldsArr[i];

                 //Obtaining colNameMap
                 if (_.size(uniqColName) == 0) {
                     uniqColName.push(colAsProperty);
                     colNameMap[colAsProperty] = i;
                     n = n + 1;
                 } else {
                     var colAsPropertyArr = [colAsProperty];
                     var intersectArr = _.intersection(colAsPropertyArr, uniqColName);
                     if (_.size(intersectArr) == 0) {
                         uniqColName.push(colAsProperty);
                         colNameMap[colAsProperty] = i;
                         n = n + 1;
                     }
                 }
             }

             //using colNameMap to extendArr
             var extendedArr = [];
             _.each(data, function(k, l) {
                 var localArr = [];
                 _.each(fieldsArr, function(o, p) {
                     var indexToChoose = colNameMap[o];
                     localArr.push(k[indexToChoose]);
                 });
                 extendedArr.push(localArr);
             });
             return extendedArr;

         };
   arrToHex1 = function(data, f, view, initializedCMap,cFieldsObj) {
             var keyLength = f.keys.length;
             var nameArr = getArr(f, 'name', view);
             var opArr = getArr(f, 'op', view);
             var idArr = getArr(f.operable.values, 'id', view);
        
			
            var propertiesArr = processCFields(data,keyLength, nameArr, opArr, idArr, cFieldsObj, initializedCMap,view);
			 console.log("propertiesArr kl",propertiesArr);
			
				
             var combineArr = [];
             propertiesArr.forEach(function(d, i) {
                 var obj = nameArr[i] + d;
                 combineArr.push(obj);
             })

             var globalArr = [];
             data.forEach(function(d, i) {
                 var localObj = _.object(combineArr, d);
                 globalArr.push(localObj);
             })
			
			 
             return globalArr;

         };

         processCFields = function(data,keyLength, nameArr, opArr, idArr, cFieldsObj, initializedCMap,view) {
             var numCFieldObj = 0;
             var cFieldClass = {};
			 var groupCount=_.size(getArr(view.typeinfo.data.keys,'name',view));
			// var cFieldsObjSize=_.size(_.keys(cFieldsObj));
			 initializedCMap['cFieldsObj']=[];
             for (var propertyName in cFieldsObj) {
			 console.log('cDataField',cFieldsObj[propertyName]['cDataField']);
                 if (cFieldsObj[propertyName]['cKeyField'] == cFieldsObj[propertyName]['cKey'] && 
				 _.size(_.keys(cFieldsObj[propertyName]['cDataField'])) != 0) 
					{
                     cFieldClass[numCFieldObj] = '#{' + propertyName + '}';   
                     //initializing cMap if need be.
                     cFieldsObj[propertyName]['cTrue'](data, propertyName, numCFieldObj,groupCount, initializedCMap);
					 numCFieldObj++;
					 initializedCMap['cFieldsObj'].push(cFieldsObj[propertyName]['cType']);
                 }
				 else {
				 cFieldsObj[propertyName]['cDefault'](data, propertyName, numCFieldObj,groupCount, initializedCMap);
				 
				 }
             }
             function getKeyArr(nameArr,startIndex,length){
			 var rangeArr=_.range(startIndex,length+startIndex);
			 console.log("rangeArr",rangeArr);
				var filtered=_.filter(nameArr,function(num,i){ var o=false;
				_.each(rangeArr,function(n,m){
				if(i==n) o=true;
				}); return o;});
			return filtered;
			 }
			 function getColArr(nameArr,startIndex,length){
			 var nameArrLength=_.size(nameArr);
			 var firstIndexForCol=startIndex+length;
			 var rangeArr=_.range(firstIndexForCol,nameArrLength+1);
			 	var filtered=_.filter(nameArr,function(num,i){ var o=false;
				_.each(rangeArr,function(n,m){
				if(i==n) o=true;
				}); return o;});
			return filtered;
			 }
        console.log("numCFieldObj",numCFieldObj);
		console.log("keyLength",keyLength);
		console.log("nameArr",nameArr);
		   var keyArr=getKeyArr(nameArr,numCFieldObj,keyLength);
		   var colArr=getColArr(nameArr,numCFieldObj,keyLength);
		   console.log("keyArr",keyArr);
		   console.log("colArr",colArr);
             var nameArr = _.map(colArr, function(num, i) {
                 return opArr[i] + "(" + num + ")";
             });
            
             var keyLArr = d3.range(0, keyLength + numCFieldObj);
             var propertiesArr = [];
			 var cFieldClassSize=_.size(_.keys(cFieldClass));
             keyLArr.forEach(function(d, i) {
                 var obj = (typeof cFieldClass[i] != 'undefined') ? cFieldClass[i] : '#{groupby' + (i + 1-cFieldClassSize) + '}';
                 propertiesArr.push(obj);
             })
			 var bracIdArr=_.map(idArr,function(m){
			 return '#['+m+']';
			 });
			propertiesArr=propertiesArr.concat(bracIdArr);

             return propertiesArr;
         };
		 initializeCFieldsObj=function(view){
			cFieldsObj = {
                 'cToggle': {
                     cKey: 'cToggleEnabled',
                     cKeyField: view.typeinfo.cToggleKey,
                     cDataField: view.typeinfo.data.cToggleTypeCol[0],
					  cDataFieldURL:"view.typeinfo.data.cToggleTypeCol[0]",
					
                     cTrue: function(data, cfieldsObjName, numCFieldObj,groupCount,initializedCMap){
					 var newField="";
					 return cTypeClassOutput['majority'](data, cfieldsObjName, numCFieldObj,groupCount,newField, initializedCMap);
					 },
					 cDefault: function(data, cfieldsObjName, numCFieldObj,groupCount,initializedCMap){
					 var newField="";
					 return cTypeClassOutput['cMapNotDefined'](data, cfieldsObjName, numCFieldObj,groupCount,newField, initializedCMap);
					 }
						//cDefault is the function to execute with cKey is 'default'
                 },
                 'cDescription': {
                     cKey: 'cDescriptionEnabled',
                     cKeyField: view.typeinfo.cDescriptionKey,
                     cDataField: view.typeinfo.data.cDescriptionCol[0],
					 cDataFieldURL:"view.typeinfo.data.cDescriptionCol[0]", 
					
                     cTrue: function(data, cfieldsObjName, numCFieldObj,groupCount,initializedCMap){
					
					 },
					 cDefault:function(data, cfieldsObjName, numCFieldObj,groupCount, initializedCMap){
					 var newField='#{cDescription}';
					 return  cTypeClassOutput['equalsToAnotherField'](data, cfieldsObjName, numCFieldObj,groupCount,newField, initializedCMap);
					 }
                 }
             };
		};
	 cManipulateView=function(cFieldsObj){
		 console.log("cFieldsObj...",cFieldsObj);
		           for (var propertyName in cFieldsObj) {
			 console.log('cDataField',cFieldsObj[propertyName]);
                 if (cFieldsObj[propertyName]['cKeyField'] == cFieldsObj[propertyName]['cKey'] && 
				 _.size(_.keys(cFieldsObj[propertyName]['cDataField'])) != 0) 
					{
                 var urlString= cFieldsObj[propertyName]['cDataFieldURL']+"={name:'"+propertyName+ "'}";
				 eval(urlString);
				 
                 }
				 else {
				var urlString= cFieldsObj[propertyName]['cDataFieldURL']+"={}";
				 eval(urlString);
				 }
				 console.log("cManipulateView[",propertyName,"]:",cFieldsObj[propertyName]['cDataField']);
             }
		 };
	
		  cTypeClassOutput = {
                 'majority': function(data, cfieldsObjName, positionIndex,groupCount,newField, initializedCMap) {
                     var cMaj = [];
                     _.each(data, function(d) {
                         cMaj.push(d[positionIndex]);
                     });
                     var cUniq = _.uniq(cMaj);
                     var cToggleCount = _.countBy(cMaj, function(types) {
                         var Ttype;
                         _.each(cUniq, function(m) {
                             if (types == m) Ttype = m;
                         });
                         return Ttype;
                     });
					
                     console.info("cToggleCount Type", cToggleCount);
                     for (var propertyName in cToggleCount) {
                         initializedCMap[cfieldsObjName] = (typeof initializedCMap['cToggleType'] == 'undefined') ?
                             propertyName : (initializedCMap[cfieldsObjName][cToggleType] > initializedCMap[cfieldsObjName][propertyName]) ? initializedCMap[cfieldsObjName] : propertyName;
                     }

                 },
                 'uniqToAnotherField': function(data, cfieldsObjName, positionIndex,groupCount,newField, initializedCMap) {
					
					//positionIndex is the positionIndex is position of the cfield in JSON-array
					var uniqDescription=[];
					var uniqMap={};
					_.each(data,function(d,i) {//JSON with only two fields
						var pegIndex= positionIndex+groupCount-1;
						
						if(i==0) {uniqDescription.push(d[positionIndex]);			
						var pegName=d[pegIndex];
						var desName=d[positionIndex];
						uniqMap[pegName]=desName;
						}
						else if (_.size(_.intersection(uniqDescription,[d[positionIndex]]))== 0){
						uniqDescription.push(d[positionIndex]);
						var pegName=d[pegIndex];
						var desName=d[positionIndex];
						uniqMap[pegName]=desName;
						}
						});
						initializedCMap[cfieldsObjName]={};
						initializedCMap[cfieldsObjName]['lookup']='groupby'+groupCount;
						initializedCMap[cfieldsObjName]['map']=uniqMap;
						initializedCMap[cfieldsObjName]['newField']=newField;
                 },
				 'cMapNotDefined': function(data, cfieldsObjName, positionIndex,groupCount,newField, initializedCMap) {
				 
				 },
				 'equalsToAnotherField':function(data, cfieldsObjName, positionIndex,groupCount,newField, initializedCMap) {
				var uniqDescription=[];
					var uniqMap={};
			
					_.each(data,function(d,i) {//JSON with only two fields
						var pegIndex= positionIndex+groupCount-1;
						
						if(i==0) {uniqDescription.push(d[positionIndex]);			
						var pegName=d[pegIndex];
						var desName=d[pegIndex];
						uniqMap[pegName]=desName;
						}
						else if (_.size(_.intersection(uniqDescription,[d[positionIndex]]))== 0){
						uniqDescription.push(d[positionIndex]);
						var pegName=d[pegIndex];
						var desName=d[pegIndex];
						uniqMap[pegName]=desName;
						}
						});
						initializedCMap[cfieldsObjName]={};
						initializedCMap[cfieldsObjName]['lookup']='groupby'+groupCount;
						initializedCMap[cfieldsObjName]['map']=uniqMap;
						initializedCMap[cfieldsObjName]['newField']=newField;
				 },
             };
         hexToModel1 = function(data, legendKey, formatLegendCast, view) {
             var ReadArray, columnNameArray, model_keyArray, objKey;
             ReadArray = [];

             objKey = Object.keys(data[0]);
			 console.log("objKey kl",objKey);
			 console.log("data kl",data[0]);
             model_keyArray = [];
             columnNameArray = [];
             var keyArray = [];
             //legendFormating
             var formatLegend; //formatLegend should be a class containing the Legend format for each model 
             if (formatLegendCast === "" && legendKey === "formatLegend")
                 console.info("Enter formatLegend");
             if (legendKey === "formatLegend") {
                 console.info("proceed");
                 eval(formatLegendCast);
             }
             if (view.typeinfo.data.operable.values[0].id === "columnInducedGroupby.L1" && formatLegendCast === "") {

                 formatLegend = {
                     'columnInducedGroupby.L1': function(dataZero) {
                         return dataZero.columnNameWithoutOp;
                     }
                 };
             }

             //-end legendFormating
             objKey.forEach(function(key) {
                 var columnNameObj, model_keyObj;
                 if ((_.str.include(key,'|') == false) && (_.str.include(key,'#{') == false)) {
                     keyArray.push(key);
                 } else {
                     return;
                 }


             });
             console.log("inside keyArray", JSON.stringify(keyArray));
             data.forEach(function(d, i) {
                 var Category, ColumnName, GroupNameArr, Model, ReadObj, Value, lastGroupby, propertyName,Description;
                 ReadObj = {};
                 Value = void 0;
                 ColumnName = void 0;
                 Category = void 0;
                 Model = void 0;
                 lastGroupby = void 0;
				 Description= void 0;
                 GroupNameArr = [];
                 for (propertyName in d) {
                     if (_.str.include(propertyName,'xaxis') === true) {
                         Category = d[propertyName];
                     }
                     if (_.str.include(propertyName,'groupby') === true) {
                         lastGroupby = d[propertyName];
                         GroupNameArr.push(lastGroupby);
                     }
					      if (_.str.include(propertyName,'Description') === true) {
                         Description = d[propertyName];
                     }
                 }
                 var dataZero = [];
                 keyArray.forEach(function(modelKey, n) {
                     var allGroupby, lastGroupby_op, model_keyObj, model_keyObjArr, model_yAxisObj, objPush;
                     for (propertyName in d) {
                         if (_.str.include(propertyName,modelKey) === true) {
                             model_keyObj = propertyName.replace(/.*\[|\]/g, "");
                             model_keyObjArr = model_keyObj.split(".");
                             model_yAxisObj = (model_keyObjArr.length > 1 ? model_keyObjArr[1] : "1");
                             //-end
                             objPush = {
                                 model: model_keyObjArr[0],
                                 yAxis: model_yAxisObj,                                                    
                                 value: d[propertyName],
                                 category: Category,
								 description: Description
                             };
                             GroupNameArr.forEach(function(d, m) {
                                 propertyName = "groupby" + (m + 1);
                                 objPush[propertyName] = d;
                             });
                             if (legendKey === "lastGroupby_op") {
                                 lastGroupby_op = lastGroupby;
                                 objPush["legendKey"] = lastGroupby_op;
                                 ReadArray.push(objPush);
                             } else if (legendKey === "allGroupby") {
                                 allGroupby = GroupNameArr.join("_");
                                 objPush["legendKey"] = allGroupby;
                                 ReadArray.push(objPush);
                             } else if (legendKey == "op(ColumnName)") {
                                 objPush["legendKey"] = cName;
                                 ReadArray.push(objPush);
                             } else if (legendKey == "formatLegend") {
                                 if (i == 0) console.log("objPush for Legend", JSON.stringify(objPush));
                                 objPush["legendKey"] = formatLegend[model_keyObj](objPush);
                                 ReadArray.push(objPush);
                             } else if (legendKey == "ColumnName") {
                                 var regExp = /\(([^)]+)\)/;
                                 var matches = regExp.exec(cName);
                                 objPush["legendKey"] = matches[1];
                                 ReadArray.push(objPush);
                             }
                         }
                     }
                 });
             });
             return ReadArray;
         };
         modelAddCMap=function(modelData,initializedCMap){
			var result=modelData;
		
		 for (var propertyName in initializedCMap){
		  if(typeof initializedCMap[propertyName]['lookup'] !='undefined') {
		  		var lookUpProperty;
				_.each(Object.keys(modelData[0]),function(m,n){
					if (_.str.include(m,initializedCMap[propertyName]['lookup']))
				lookUpProperty=m;
				});
				result=_.map(result,function(d,i){
			var sampleObj=_.clone(d);
			var newFieldValue=initializedCMap[propertyName]['map'][d[lookUpProperty]];
			var newFieldName=initializedCMap[propertyName]['newField'];
			sampleObj[newFieldName]=newFieldValue;
			return sampleObj;
			});
			}
		 }
		 return result;
		 };
		 modelToHex = function(modelData, groupByArr) {
             var hexData = [];
             var nest = d3.nest();
             _.each(groupByArr, function(m, n) {
                 nest=nest.key(function(d) {
                     return d[m];
                 });
             });
             nest.rollup(function(d) {
                 var uniqModel = _.uniq(_.pluck(d, 'model'));
                 var sampleObj = _.clone(d[0]);
                 _.each(uniqModel, function(m) {
                     sampleObj[m] = _.pluck(_.where(d, {
                         'model': m
                     }), 'value')[0];
                 });
                 //remove fields that won't be needed
                 _.each(['yAxis', 'value', 'model','category'], function(n) {
                     delete sampleObj[n];
                 });
                 hexData.push(sampleObj);
             });
			 nest.entries(modelData);
             return hexData;
         };
         //--Enhanced Logic for UI to make chart smarter
         autoDetectNestArr = function(f, view) {
             var nameArr = getArr(f.operable.values, 'name', view);
             nameArr = _.map(nameArr, function(d) {
                 return (_.str.include(d, '.')) ? d.split('.')[1] : d;
             });
             return nameArr;
         };
         //--End,Enhanced Logic for UI to make chart smarter
         groupByFn = function(data, groupByArr, formatClass) {
             var aggreData, nest;
             nest = d3.nest();
             aggreData = [];
             _.each(groupByArr, function(m, n) {
                 nest.key(function(d) {
                     return d[m];
                 });
             });
             var result = [];
             nest.rollup(function(k) {
                 var sampleObj = _.clone(k[0]);
                 if (typeof safeRead(formatClass, _.pluck(k, 'yAxis'), 'formatValueOutlook') != 'undefined' && view.typeinfo.formatClassKey == 'formatClassCast') {
                     sampleObj['value'] = formatClass[_.pluck(k, 'yAxis')]['formatValueByCategory'](_.pluck(k, 'value'));
                 } else sampleObj['value'] = d3.sum(k, function(g) {
                     return g.value;
                 });
                 if (typeof safeRead(formatClass, _.pluck(k, 'yAxis'), 'formatValueOutlook') != 'undefined' && view.typeinfo.formatClassKey == 'formatClassCast') {
                     sampleObj['value'] = formatClass[_.pluck(k, 'yAxis')]['formatValueOutlook'](sampleObj['value']);
                 } else sampleObj['value'] = d3.round(sampleObj['value'], 2);
                 result.push(sampleObj);
             }).entries(data);
             return result;
         };
         //$$$
            chartPreGen = function(modelData,rootObj,Fselect) {
         
             for (var property in modelData[0]) {
                 if (_.str.include(property, 'groupby')) groupCount++;
             }
			 
			 groupCount=2;
             groupbyRange = _.map(_.range(1, groupCount + 1), function(m) {
                 return 'groupby' + m;
             });
             var groupByArr = ['model'];
             var groupByArr = _.union(groupByArr, groupbyRange);

             var aggregateData = groupByFn(modelData, groupByArr);
             var modelToHexData = modelToHex(aggregateData, groupbyRange);
			 console.log("modelToHexData",JSON.stringify(modelToHexData));
             var nest=d3.nest();
             _.each(groupbyRange, function(m, n) {
                 nest=nest.key(function(d, i) {
                     return d[m];
                 });
             });
			
             rootObj['values'] = nest.entries(modelToHexData);

             color= ["#bd0026", "#fecc5c", "#fd8d3c", "#f03b20", "#B02D5D",
                 "#9B2C67", "#982B9A", "#692DA7", "#5725AA", "#4823AF",
                 "#d7b5d8", "#dd1c77", "#5A0C7A", "#5A0C7A"
             ];

             rootObj['x0'] = height / 2;
            rootObj['y0'] = 0;
			
			Fselect.sourceField=_.union(['description'],groupbyRange);
    

         };
  initializeFselect = function(f, view, nestArr, groupCount,Fselect,ToolTipContainer,cFieldsObj) {
             var modelYAxisMap = getArr(f.operable, 'id', view);
       
			 var modelYAxisMapObj={};
			 _.each(modelYAxisMap,function(m,n){
			  var propertyName = m.split('.')[1];
			  modelYAxisMapObj[propertyName]=m.split(".")[0];
			 })
			console.log('modelYAxisMap kop',modelYAxisMap);
			
                if (formatClassKey == 'formatClassCast') {
                 for (var propertyName in formatClass) {
                     if (formatClass[propertyName]['cToggleAccept'] == 'All' || formatClass[propertyName]['cToggleAccept'] == cFieldsObj['cToggle']['cTrue']) {
                         ToolTipContainer[propertyName]=modelYAxisMapObj[propertyName];
                     }
                 }
             } else {
                 for (var propertyName in modelYAxisMapObj) {
                      ToolTipContainer[propertyName]=modelYAxisMapObj[propertyName];
                 }
             }

             var fSelectNameArr = _.map(_.values(ToolTipContainer), function(d) {
                 return 'sum_' + d;
             }); // add 'sum_' infront
			 
             Fselect['spendField'] = fSelectNameArr[0];
             Fselect['actField'] = fSelectNameArr[0];
             Fselect['sumField'] = _.values(ToolTipContainer);

         };

		safeRead = function() {
			var current, formatProperty, obj, prop, props, val, _i, _len;

			obj = arguments[0], props = 2 <= arguments.length ? [].slice.call(arguments, 1) : [];

			read = function(obj, prop) {
				if ((obj != null ? obj[prop] : void 0) == null) {
					return;
				}
				return obj[prop];
			};

			current = obj;
			for (_i = 0, _len = props.length; _i < _len; _i++) {
				prop = props[_i];

				if (val = read(current, prop)) {
					current = val;
				} else {
					return undefined;
				}
			}
			return current;
		};
  
   getArr =function(obj, k, view) { //used on view.typeinfo to get an array of property value of the propertyName 'name'
     var objects = [];
     for (var i in obj) {
         if (!obj.hasOwnProperty(i)) continue;
         if (typeof obj[i] == 'object') {
             objects = objects.concat(getArr(obj[i], k, view));
         } else if (_.str.include(i,k) == true) {
		
             if (k == "name") {
                 objects.push(cutTableName(obj[i], view));
             } else
                 objects.push(obj[i]);
         }
     }
	
     return objects;
 };
    cutTableName=function(stringText,view) {
		
      var uniTable = (view.data.jsonClass === "DataAdhocTable") ? view.data.fields[0].table + "." : null;
      var colm = (uniTable == null) ? stringText : stringText.split(uniTable)[1];
      return colm;
  };
	settingFrame=function(frameHeight,frameWidth,view,div,elx){
	 d3.select("#mega"+view.id).style("overflow",'scroll').style("height",frameHeight+"px").style("width",frameWidth+"px");
  	console.log("div",div);
   	elx.host.setupAutoResize(div, function(w,h){
  
	console.log("d3selectMega",d3.select("#mega"+view.id));
	console.log("w:",w);
  	if(w !== view.typeinfo.frameWidth || h != view.typeinfo.frameHeight){
  	d3.select("#mega"+view.id).style("overflow",'scroll').style("height",h+"px").style("width",w+"px");
  		}
    });
	
	
	};

     }

  
</div>
========